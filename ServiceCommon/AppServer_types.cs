



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : AppServer_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace rDSN
{
namespace Tron
{

/// <summary>
/// ServicePartitionSuggestRequest
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ServicePartitionSuggestRequest : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional rDSN.Tron.ServicePartitionInfo Partition
    private global::rDSN.Tron.ServicePartitionInfo m_Partition;

    // 2: Optional rDSN.Tron.ServicePartitionAction Act
    private global::rDSN.Tron.ServicePartitionAction m_Act;

    // 3: Optional rDSN.Tron.ServiceInfo ServiceDetail
    private global::rDSN.Tron.ServiceInfo m_ServiceDetail;

    /// <summary>
    /// Partition
    /// </summary>
    public global::rDSN.Tron.ServicePartitionInfo Partition
    {
        get { return this.m_Partition; }
        set { this.m_Partition = value; }
    }

    /// <summary>
    /// Act
    /// </summary>
    public global::rDSN.Tron.ServicePartitionAction Act
    {
        get { return this.m_Act; }
        set { this.m_Act = value; }
    }

    /// <summary>
    /// ServiceDetail
    /// </summary>
    public global::rDSN.Tron.ServiceInfo ServiceDetail
    {
        get { return this.m_ServiceDetail; }
        set { this.m_ServiceDetail = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Partition_meta = new Metadata();
        public static readonly Metadata Act_meta = new Metadata();
        public static readonly Metadata ServiceDetail_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ServicePartitionSuggestRequest");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron." + meta.name;


            // Partition
            Partition_meta.name = "Partition";
            Partition_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Act
            Act_meta.name = "Act";
            Act_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Act_meta.default_value.int_value = Convert.ToInt64(global::rDSN.Tron.ServicePartitionAction.PUT);

            // ServiceDetail
            ServiceDetail_meta.name = "ServiceDetail";
            ServiceDetail_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Partition = 1;
        public const int Act = 2;
        public const int ServiceDetail = 3;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Partition = "Partition";
        public const String s_Act = "Act";
        public const String s_ServiceDetail = "ServiceDetail";
    }   // ~__internal

    // Constructor
    public ServicePartitionSuggestRequest()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Partition = new global::rDSN.Tron.ServicePartitionInfo();
        m_Act = global::rDSN.Tron.ServicePartitionAction.PUT;
        m_ServiceDetail = new global::rDSN.Tron.ServiceInfo();
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.ServicePartitionSuggestRequest cloned = new global::rDSN.Tron.ServicePartitionSuggestRequest();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.ServicePartitionSuggestRequest that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: rDSN.Tron.ServicePartitionInfo Partition
        that.Partition = (this.Partition == null ? null : (global::rDSN.Tron.ServicePartitionInfo)this.Partition.Clone());
        // 2: rDSN.Tron.ServicePartitionAction Act
        that.Act = this.Act;
        // 3: rDSN.Tron.ServiceInfo ServiceDetail
        that.ServiceDetail = (this.ServiceDetail == null ? null : (global::rDSN.Tron.ServiceInfo)this.ServiceDetail.Clone());
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Partition.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Act = (global::rDSN.Tron.ServicePartitionAction)reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ServiceDetail.Read(reader);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Partition:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.Partition.Read(reader);
                    break;
                case __ordinals.Act:  // id=2
                    this.Act = (global::rDSN.Tron.ServicePartitionAction)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.ServiceDetail:  // id=3
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.ServiceDetail.Read(reader);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ServicePartitionSuggestRequest))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.Partition, Schema.Partition_meta);
            m_Partition.Write(writer, true);
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.Act_meta.default_value.Equals(Convert.ToInt32(m_Act))))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.Act, Schema.Act_meta);
                writer.WriteInt32((Int32)m_Act);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.Act, Schema.Act_meta);
        }

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.ServiceDetail, Schema.ServiceDetail_meta);
            m_ServiceDetail.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Partition";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.ServicePartitionInfo.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Act";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::rDSN.Tron.ServicePartitionAction.PUT);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="ServiceDetail";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.ServiceInfo.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ServicePartitionSuggestRequest that = obj as ServicePartitionSuggestRequest;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(ServicePartitionSuggestRequest other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(ServicePartitionSuggestRequest that)
    {
        bool equals = true;
        
        equals = equals && ((this.Act == that.Act));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(ServicePartitionSuggestRequest that)
    {
        bool equals = true;
        
        equals = equals && (this.Partition == null ? true : this.Partition.MemberwiseCompare(that.Partition));
        equals = equals && (this.ServiceDetail == null ? true : this.ServiceDetail.MemberwiseCompare(that.ServiceDetail));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Partition, this.Partition, separator);
        sb.AppendFormat(format, __internal.s_Act, this.Act, separator);
        sb.AppendFormat(format, __internal.s_ServiceDetail, this.ServiceDetail, separator);
        
        return sb.ToString();
    } // ToString()

}; // class ServicePartitionSuggestRequest
} // namespace Tron
} // namespace rDSN
