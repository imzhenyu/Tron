/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Microsoft Corporation
 * 
 * -=- Robust Distributed System Nucleus (rDSN) -=- 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 * Description:
 *     What is this file about?
 *
 * Revision history:
 *     Feb., 2016, @imzhenyu (Zhenyu Guo), done in Tron project and copied here
 *     xxxx-xx-xx, author, fix bug about xxx
 */
 
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : AppServer_proxies.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::BondTransport;
using global::BondNetlibTransport;
using global::Microsoft.Bond;
using global::System;
using global::System.Collections.Generic;

namespace rDSN
{
namespace Tron
{

///<summary>
/// AppServer
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public class AppServer_Proxy : BondTransport.BondProxy
{
    //
    // Constructors
    //
    public AppServer_Proxy(IBondTransportClient client) : base(client, "Microsoft::Tron.AppServer")
    {
    }

    public AppServer_Proxy(IBondTransportClient client, string serviceName) : base(client, serviceName)
    {
    }

    public global::Microsoft.Bond.Message<global::Microsoft.Bond.Void> SuggestServicePartition(global::Microsoft.Bond.Message<global::rDSN.Tron.ServicePartitionSuggestRequest> input)
    {
        return SuggestServicePartition(input, Infinite);
    }

    public virtual void SuggestServicePartition(global::rDSN.Tron.ServicePartitionSuggestRequest input)
    {
        SuggestServicePartition(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::Microsoft.Bond.Void> SuggestServicePartition(global::Microsoft.Bond.Message<global::rDSN.Tron.ServicePartitionSuggestRequest> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginSuggestServicePartition(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndSuggestServicePartition(asyncResult);
        }
        CancelSuggestServicePartition(asyncResult);
        throw new global::System.TimeoutException("SuggestServicePartition");
    }

    public void SuggestServicePartition(global::rDSN.Tron.ServicePartitionSuggestRequest input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.ServicePartitionSuggestRequest> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.ServicePartitionSuggestRequest>(input);

        global::Microsoft.Bond.Message<global::Microsoft.Bond.Void> resultMsg = SuggestServicePartition(inputMsg, timeout);
        global::Microsoft.Bond.Void result = new global::Microsoft.Bond.Void();
        resultMsg.Payload.Deserialize(result);
    }

    //
    // Async invocation of SuggestServicePartition.
    //

    public IAsyncResult BeginSuggestServicePartition(global::Microsoft.Bond.Message<global::rDSN.Tron.ServicePartitionSuggestRequest> input)
    {
        return BeginSuggestServicePartition(input, null, null);
    }

    public IAsyncResult BeginSuggestServicePartition(global::rDSN.Tron.ServicePartitionSuggestRequest input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.ServicePartitionSuggestRequest> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.ServicePartitionSuggestRequest>(input);
        return BeginSuggestServicePartition(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginSuggestServicePartition(global::rDSN.Tron.ServicePartitionSuggestRequest input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.ServicePartitionSuggestRequest> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.ServicePartitionSuggestRequest>(input);
        return BeginSuggestServicePartition(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginSuggestServicePartition(global::Microsoft.Bond.Message<global::rDSN.Tron.ServicePartitionSuggestRequest> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.ServicePartitionSuggestRequest>("SuggestServicePartition", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::Microsoft.Bond.Void> EndSuggestServicePartition(IAsyncResult asyncResult)
    {
        return EndRequest<global::Microsoft.Bond.Void>("SuggestServicePartition", asyncResult);
    }

    public void CancelSuggestServicePartition(IAsyncResult asyncResult)
    {
        CancelRequest("SuggestServicePartition", asyncResult);
    }

}    // ~ AppServer_Proxy
} // namespace Tron
} // namespace rDSN
