/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Microsoft Corporation
 * 
 * -=- Robust Distributed System Nucleus (rDSN) -=- 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 * Description:
 *     What is this file about?
 *
 * Revision history:
 *     Feb., 2016, @imzhenyu (Zhenyu Guo), done in Tron project and copied here
 *     xxxx-xx-xx, author, fix bug about xxx
 */
 
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : ServiceStore_services.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::BondTransport;
using global::BondNetlibTransport;
using global::Microsoft.Bond;
using global::System;
using global::System.Collections.Generic;

namespace rDSN
{
namespace Tron
{

///<summary>
/// ServiceStore
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class ServiceStore_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public ServiceStore_Service() : this("Microsoft::Tron.ServiceStore")
    {
    }

    public ServiceStore_Service(string serviceName) : base(serviceName)
    {
        Register("RegisterServicePackage", new BondTransport.FunctionHelper(RegisterServicePackageHelper));

        Register("RemoveServicePackage", new BondTransport.FunctionHelper(RemoveServicePackageHelper));

        Register("GetServicePackageByName", new BondTransport.FunctionHelper(GetServicePackageByNameHelper));

        Register("GetServiceList", new BondTransport.FunctionHelper(GetServiceListHelper));

        Register("GetServiceCompositionAssembly", new BondTransport.FunctionHelper(GetServiceCompositionAssemblyHelper));

        Register("QueryServicePackage", new BondTransport.FunctionHelper(QueryServicePackageHelper));

    }

    public abstract void RegisterServicePackage(Request<global::rDSN.Tron.ServicePackage, global::rDSN.Tron.RpcError> call);

    public abstract void RemoveServicePackage(Request<global::rDSN.Tron.Name, global::rDSN.Tron.RpcError> call);

    public abstract void GetServicePackageByName(Request<global::rDSN.Tron.Name, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServicePackage>> call);

    public abstract void GetServiceList(Request<Microsoft.Bond.Void, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServiceList>> call);

    public abstract void GetServiceCompositionAssembly(Request<global::rDSN.Tron.Name, global::rDSN.Tron.RpcResponse<BondBlob>> call);

    public abstract void QueryServicePackage(Request<global::rDSN.Tron.Name, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.NameList>> call);

    public virtual void RegisterServicePackageHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.ServicePackage, global::rDSN.Tron.RpcError> request = GenerateRequest<global::rDSN.Tron.ServicePackage, global::rDSN.Tron.RpcError>(msg, serv);
        if (request != null)
        {
            RegisterServicePackage(request);
        }
    }


    public virtual void RemoveServicePackageHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.Name, global::rDSN.Tron.RpcError> request = GenerateRequest<global::rDSN.Tron.Name, global::rDSN.Tron.RpcError>(msg, serv);
        if (request != null)
        {
            RemoveServicePackage(request);
        }
    }


    public virtual void GetServicePackageByNameHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.Name, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServicePackage>> request = GenerateRequest<global::rDSN.Tron.Name, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServicePackage>>(msg, serv);
        if (request != null)
        {
            GetServicePackageByName(request);
        }
    }


    public virtual void GetServiceListHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<Microsoft.Bond.Void, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServiceList>> request = GenerateRequest<Microsoft.Bond.Void, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServiceList>>(msg, serv);
        if (request != null)
        {
            GetServiceList(request);
        }
    }


    public virtual void GetServiceCompositionAssemblyHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.Name, global::rDSN.Tron.RpcResponse<BondBlob>> request = GenerateRequest<global::rDSN.Tron.Name, global::rDSN.Tron.RpcResponse<BondBlob>>(msg, serv);
        if (request != null)
        {
            GetServiceCompositionAssembly(request);
        }
    }


    public virtual void QueryServicePackageHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.Name, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.NameList>> request = GenerateRequest<global::rDSN.Tron.Name, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.NameList>>(msg, serv);
        if (request != null)
        {
            QueryServicePackage(request);
        }
    }

}    // ~ ServiceStore_Service
} // namespace Tron
} // namespace rDSN
