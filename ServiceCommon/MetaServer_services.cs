//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : MetaServer_services.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::BondTransport;
using global::BondNetlibTransport;
using global::Microsoft.Bond;
using global::System;
using global::System.Collections.Generic;

namespace rDSN
{
namespace Tron
{

///<summary>
/// MetaServer
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class MetaServer_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public MetaServer_Service() : this("Microsoft::Tron.MetaServer")
    {
    }

    public MetaServer_Service(string serviceName) : base(serviceName)
    {
        Register("CreateService", new BondTransport.FunctionHelper(CreateServiceHelper));

        Register("RemoveService", new BondTransport.FunctionHelper(RemoveServiceHelper));

        Register("QueryServices", new BondTransport.FunctionHelper(QueryServicesHelper));

        Register("QueryServersByAddress", new BondTransport.FunctionHelper(QueryServersByAddressHelper));

        Register("QueryServersByName", new BondTransport.FunctionHelper(QueryServersByNameHelper));

        Register("PlaceService", new BondTransport.FunctionHelper(PlaceServiceHelper));

    }

    public abstract void CreateService(Request<global::rDSN.Tron.ServiceInfo, global::rDSN.Tron.RpcError> call);

    public abstract void RemoveService(Request<global::rDSN.Tron.Name, global::rDSN.Tron.RpcError> call);

    public abstract void QueryServices(Request<global::rDSN.Tron.NameList, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServiceListResponse>> call);

    public abstract void QueryServersByAddress(Request<global::rDSN.Tron.ServerListRequest, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServerListResponse>> call);

    public abstract void QueryServersByName(Request<global::rDSN.Tron.NameList, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServerListResponse2>> call);

    public abstract void PlaceService(Request<global::rDSN.Tron.ServicePlaceRequest, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServicePartitionInfo>> call);

    public virtual void CreateServiceHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.ServiceInfo, global::rDSN.Tron.RpcError> request = GenerateRequest<global::rDSN.Tron.ServiceInfo, global::rDSN.Tron.RpcError>(msg, serv);
        if (request != null)
        {
            CreateService(request);
        }
    }


    public virtual void RemoveServiceHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.Name, global::rDSN.Tron.RpcError> request = GenerateRequest<global::rDSN.Tron.Name, global::rDSN.Tron.RpcError>(msg, serv);
        if (request != null)
        {
            RemoveService(request);
        }
    }


    public virtual void QueryServicesHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.NameList, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServiceListResponse>> request = GenerateRequest<global::rDSN.Tron.NameList, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServiceListResponse>>(msg, serv);
        if (request != null)
        {
            QueryServices(request);
        }
    }


    public virtual void QueryServersByAddressHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.ServerListRequest, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServerListResponse>> request = GenerateRequest<global::rDSN.Tron.ServerListRequest, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServerListResponse>>(msg, serv);
        if (request != null)
        {
            QueryServersByAddress(request);
        }
    }


    public virtual void QueryServersByNameHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.NameList, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServerListResponse2>> request = GenerateRequest<global::rDSN.Tron.NameList, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServerListResponse2>>(msg, serv);
        if (request != null)
        {
            QueryServersByName(request);
        }
    }


    public virtual void PlaceServiceHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.ServicePlaceRequest, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServicePartitionInfo>> request = GenerateRequest<global::rDSN.Tron.ServicePlaceRequest, global::rDSN.Tron.RpcResponse<global::rDSN.Tron.ServicePartitionInfo>>(msg, serv);
        if (request != null)
        {
            PlaceService(request);
        }
    }

}    // ~ MetaServer_Service
} // namespace Tron
} // namespace rDSN
