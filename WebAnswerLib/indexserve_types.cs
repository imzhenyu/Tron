



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : indexserve_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace rDSN
{
namespace Tron
{
namespace App
{

/// <summary>
/// SpellCheckRequest
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SpellCheckRequest : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional string Word
    private String m_Word;

    /// <summary>
    /// Word
    /// </summary>
    public String Word
    {
        get { return this.m_Word; }
        set { this.m_Word = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Word_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SpellCheckRequest");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // Word
            Word_meta.name = "Word";
            Word_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Word = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Word = "Word";
    }   // ~__internal

    // Constructor
    public SpellCheckRequest()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Word = string.Empty;
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.SpellCheckRequest cloned = new global::rDSN.Tron.App.SpellCheckRequest();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.SpellCheckRequest that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string Word
        that.Word = this.Word;
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Word = reader.ReadString();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Word:  // id=1
                    this.Word = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SpellCheckRequest))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.Word_meta.default_value.Equals(m_Word)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Word, Schema.Word_meta);
                writer.WriteString(m_Word);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Word, Schema.Word_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Word";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SpellCheckRequest that = obj as SpellCheckRequest;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(SpellCheckRequest other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(SpellCheckRequest that)
    {
        bool equals = true;
        
        equals = equals && ((this.Word == null) == (that.Word == null));
        equals = equals && (this.Word == null ? true : (this.Word.Length == that.Word.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(SpellCheckRequest that)
    {
        bool equals = true;
        
        equals = equals && (this.Word == null ? true : this.Word == that.Word);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Word, this.Word, separator);
        
        return sb.ToString();
    } // ToString()

}; // class SpellCheckRequest

/// <summary>
/// SpellCheckResultEntry
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SpellCheckResultEntry : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional string Word
    private String m_Word;

    // 2: Optional double Score
    private Double m_Score;

    /// <summary>
    /// Word
    /// </summary>
    public String Word
    {
        get { return this.m_Word; }
        set { this.m_Word = value; }
    }

    /// <summary>
    /// Score
    /// </summary>
    public Double Score
    {
        get { return this.m_Score; }
        set { this.m_Score = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Word_meta = new Metadata();
        public static readonly Metadata Score_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SpellCheckResultEntry");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // Word
            Word_meta.name = "Word";
            Word_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Score
            Score_meta.name = "Score";
            Score_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Score_meta.default_value.double_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Word = 1;
        public const int Score = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Word = "Word";
        public const String s_Score = "Score";
    }   // ~__internal

    // Constructor
    public SpellCheckResultEntry()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Word = string.Empty;
        m_Score = 0;
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.SpellCheckResultEntry cloned = new global::rDSN.Tron.App.SpellCheckResultEntry();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.SpellCheckResultEntry that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string Word
        that.Word = this.Word;
        // 2: double Score
        that.Score = this.Score;
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Word = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Score = reader.ReadDouble();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Word:  // id=1
                    this.Word = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Score:  // id=2
                    this.Score = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SpellCheckResultEntry))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.Word_meta.default_value.Equals(m_Word)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Word, Schema.Word_meta);
                writer.WriteString(m_Word);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Word, Schema.Word_meta);
        }

        if (writeAllFields || (!Schema.Score_meta.default_value.Equals(m_Score)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_DOUBLE, __ordinals.Score, Schema.Score_meta);
                writer.WriteDouble(m_Score);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_DOUBLE, __ordinals.Score, Schema.Score_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Word";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Score";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SpellCheckResultEntry that = obj as SpellCheckResultEntry;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(SpellCheckResultEntry other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(SpellCheckResultEntry that)
    {
        bool equals = true;
        
        equals = equals && ((this.Word == null) == (that.Word == null));
        equals = equals && (this.Word == null ? true : (this.Word.Length == that.Word.Length));
        equals = equals && ((Double.IsNaN(this.Score) ? Double.IsNaN(that.Score) : (this.Score == that.Score)));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(SpellCheckResultEntry that)
    {
        bool equals = true;
        
        equals = equals && (this.Word == null ? true : this.Word == that.Word);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Word, this.Word, separator);
        sb.AppendFormat(format, __internal.s_Score, this.Score, separator);
        
        return sb.ToString();
    } // ToString()

}; // class SpellCheckResultEntry

/// <summary>
/// SpellCheckResponse
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SpellCheckResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional list<rDSN.Tron.App.SpellCheckResultEntry> Candidates
    private LinkedList<global::rDSN.Tron.App.SpellCheckResultEntry> m_Candidates;

    /// <summary>
    /// Candidates
    /// </summary>
    public LinkedList<global::rDSN.Tron.App.SpellCheckResultEntry> Candidates
    {
        get { return this.m_Candidates; }
        set { this.m_Candidates = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Candidates_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SpellCheckResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // Candidates
            Candidates_meta.name = "Candidates";
            Candidates_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Candidates = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Candidates = "Candidates";
    }   // ~__internal

    // Constructor
    public SpellCheckResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_Candidates == null)
        {
            m_Candidates = new LinkedList<global::rDSN.Tron.App.SpellCheckResultEntry>();
        }
        else
        {
            m_Candidates.Clear();
        }
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.SpellCheckResponse cloned = new global::rDSN.Tron.App.SpellCheckResponse();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.SpellCheckResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: list<rDSN.Tron.App.SpellCheckResultEntry> Candidates
        if (this.Candidates != null)
        {
            if (that.Candidates == null)
            {
                that.Candidates = new LinkedList<global::rDSN.Tron.App.SpellCheckResultEntry>();
            }
            else
            {
                that.Candidates.Clear();
            }
            foreach (var iter1 in this.Candidates)
            {
                global::rDSN.Tron.App.SpellCheckResultEntry tmpItem2 = default(global::rDSN.Tron.App.SpellCheckResultEntry);
                tmpItem2 = (iter1 == null ? null : (global::rDSN.Tron.App.SpellCheckResultEntry)iter1.Clone());
                that.Candidates.AddLast(tmpItem2);
            }
        }
        else
        {
            that.Candidates = null;
        }
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Candidates(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Candidates:  // id=1
                    this.ReadField_impl_Candidates(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_Candidates(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::rDSN.Tron.App.SpellCheckResultEntry element3 = new global::rDSN.Tron.App.SpellCheckResultEntry();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_Candidates.AddLast(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Candidates


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SpellCheckResponse))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        UInt32 count1 = ((UInt32)m_Candidates.Count);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Candidates, Schema.Candidates_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            foreach (var item2 in m_Candidates)
            {
                    item2.Write(writer, true);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Candidates, Schema.Candidates_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Candidates";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::rDSN.Tron.App.SpellCheckResultEntry.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SpellCheckResponse that = obj as SpellCheckResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(SpellCheckResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(SpellCheckResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.Candidates == null) == (that.Candidates == null));
        equals = equals && ((this.Candidates == null) ? true : (this.Candidates.Count == that.Candidates.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(SpellCheckResponse that)
    {
        bool equals = true;
        
        if (equals && this.Candidates != null && this.Candidates.Count != 0)
        {
            var enum_1_1 = this.Candidates.GetEnumerator();
            var enum_2_2 = that.Candidates.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Candidates, this.Candidates, separator);
        
        return sb.ToString();
    } // ToString()

}; // class SpellCheckResponse

/// <summary>
/// StringQuery
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class StringQuery : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional string Query
    private String m_Query;

    /// <summary>
    /// Query
    /// </summary>
    public String Query
    {
        get { return this.m_Query; }
        set { this.m_Query = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Query_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("StringQuery");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // Query
            Query_meta.name = "Query";
            Query_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Query = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Query = "Query";
    }   // ~__internal

    // Constructor
    public StringQuery()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Query = string.Empty;
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.StringQuery cloned = new global::rDSN.Tron.App.StringQuery();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.StringQuery that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string Query
        that.Query = this.Query;
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Query = reader.ReadString();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Query:  // id=1
                    this.Query = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(StringQuery))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.Query_meta.default_value.Equals(m_Query)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Query, Schema.Query_meta);
                writer.WriteString(m_Query);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Query, Schema.Query_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Query";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        StringQuery that = obj as StringQuery;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(StringQuery other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(StringQuery that)
    {
        bool equals = true;
        
        equals = equals && ((this.Query == null) == (that.Query == null));
        equals = equals && (this.Query == null ? true : (this.Query.Length == that.Query.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(StringQuery that)
    {
        bool equals = true;
        
        equals = equals && (this.Query == null ? true : this.Query == that.Query);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Query, this.Query, separator);
        
        return sb.ToString();
    } // ToString()

}; // class StringQuery

/// <summary>
/// ErrorResult
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ErrorResult : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional int32 ErrorCode
    private Int32 m_ErrorCode;

    /// <summary>
    /// ErrorCode
    /// </summary>
    public Int32 ErrorCode
    {
        get { return this.m_ErrorCode; }
        set { this.m_ErrorCode = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata ErrorCode_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ErrorResult");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // ErrorCode
            ErrorCode_meta.name = "ErrorCode";
            ErrorCode_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            ErrorCode_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int ErrorCode = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_ErrorCode = "ErrorCode";
    }   // ~__internal

    // Constructor
    public ErrorResult()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_ErrorCode = 0;
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.ErrorResult cloned = new global::rDSN.Tron.App.ErrorResult();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.ErrorResult that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: int32 ErrorCode
        that.ErrorCode = this.ErrorCode;
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ErrorCode = reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.ErrorCode:  // id=1
                    this.ErrorCode = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ErrorResult))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.ErrorCode_meta.default_value.Equals(m_ErrorCode)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.ErrorCode, Schema.ErrorCode_meta);
                writer.WriteInt32(m_ErrorCode);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.ErrorCode, Schema.ErrorCode_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="ErrorCode";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ErrorResult that = obj as ErrorResult;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(ErrorResult other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(ErrorResult that)
    {
        bool equals = true;
        
        equals = equals && ((this.ErrorCode == that.ErrorCode));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(ErrorResult that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_ErrorCode, this.ErrorCode, separator);
        
        return sb.ToString();
    } // ToString()

}; // class ErrorResult

/// <summary>
/// Rank
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Rank : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional int32 Value
    private Int32 m_Value;

    /// <summary>
    /// Value
    /// </summary>
    public Int32 Value
    {
        get { return this.m_Value; }
        set { this.m_Value = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Value_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("Rank");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // Value
            Value_meta.name = "Value";
            Value_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Value_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Value = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Value = "Value";
    }   // ~__internal

    // Constructor
    public Rank()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Value = 0;
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.Rank cloned = new global::rDSN.Tron.App.Rank();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.Rank that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: int32 Value
        that.Value = this.Value;
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Value = reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Value:  // id=1
                    this.Value = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(Rank))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.Value_meta.default_value.Equals(m_Value)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.Value, Schema.Value_meta);
                writer.WriteInt32(m_Value);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.Value, Schema.Value_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Value";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Rank that = obj as Rank;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(Rank other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(Rank that)
    {
        bool equals = true;
        
        equals = equals && ((this.Value == that.Value));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(Rank that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Value, this.Value, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Rank

/// <summary>
/// AlterativeQueryList
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class AlterativeQueryList : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional rDSN.Tron.App.StringQuery RawQuery
    private global::rDSN.Tron.App.StringQuery m_RawQuery;

    // 2: Optional list<rDSN.Tron.App.StringQuery> Alterations
    private LinkedList<global::rDSN.Tron.App.StringQuery> m_Alterations;

    /// <summary>
    /// RawQuery
    /// </summary>
    public global::rDSN.Tron.App.StringQuery RawQuery
    {
        get { return this.m_RawQuery; }
        set { this.m_RawQuery = value; }
    }

    /// <summary>
    /// Alterations
    /// </summary>
    public LinkedList<global::rDSN.Tron.App.StringQuery> Alterations
    {
        get { return this.m_Alterations; }
        set { this.m_Alterations = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata RawQuery_meta = new Metadata();
        public static readonly Metadata Alterations_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("AlterativeQueryList");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // RawQuery
            RawQuery_meta.name = "RawQuery";
            RawQuery_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Alterations
            Alterations_meta.name = "Alterations";
            Alterations_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int RawQuery = 1;
        public const int Alterations = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_RawQuery = "RawQuery";
        public const String s_Alterations = "Alterations";
    }   // ~__internal

    // Constructor
    public AlterativeQueryList()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_RawQuery = new global::rDSN.Tron.App.StringQuery();
        if (m_Alterations == null)
        {
            m_Alterations = new LinkedList<global::rDSN.Tron.App.StringQuery>();
        }
        else
        {
            m_Alterations.Clear();
        }
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.AlterativeQueryList cloned = new global::rDSN.Tron.App.AlterativeQueryList();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.AlterativeQueryList that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: rDSN.Tron.App.StringQuery RawQuery
        that.RawQuery = (this.RawQuery == null ? null : (global::rDSN.Tron.App.StringQuery)this.RawQuery.Clone());
        // 2: list<rDSN.Tron.App.StringQuery> Alterations
        if (this.Alterations != null)
        {
            if (that.Alterations == null)
            {
                that.Alterations = new LinkedList<global::rDSN.Tron.App.StringQuery>();
            }
            else
            {
                that.Alterations.Clear();
            }
            foreach (var iter1 in this.Alterations)
            {
                global::rDSN.Tron.App.StringQuery tmpItem2 = default(global::rDSN.Tron.App.StringQuery);
                tmpItem2 = (iter1 == null ? null : (global::rDSN.Tron.App.StringQuery)iter1.Clone());
                that.Alterations.AddLast(tmpItem2);
            }
        }
        else
        {
            that.Alterations = null;
        }
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.RawQuery.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Alterations(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.RawQuery:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.RawQuery.Read(reader);
                    break;
                case __ordinals.Alterations:  // id=2
                    this.ReadField_impl_Alterations(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_Alterations(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::rDSN.Tron.App.StringQuery element3 = new global::rDSN.Tron.App.StringQuery();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_Alterations.AddLast(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Alterations


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(AlterativeQueryList))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.RawQuery, Schema.RawQuery_meta);
            m_RawQuery.Write(writer, true);
        writer.WriteFieldEnd();
        UInt32 count1 = ((UInt32)m_Alterations.Count);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Alterations, Schema.Alterations_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            foreach (var item2 in m_Alterations)
            {
                    item2.Write(writer, true);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Alterations, Schema.Alterations_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="RawQuery";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.App.StringQuery.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Alterations";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::rDSN.Tron.App.StringQuery.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        AlterativeQueryList that = obj as AlterativeQueryList;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(AlterativeQueryList other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(AlterativeQueryList that)
    {
        bool equals = true;
        
        equals = equals && ((this.Alterations == null) == (that.Alterations == null));
        equals = equals && ((this.Alterations == null) ? true : (this.Alterations.Count == that.Alterations.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(AlterativeQueryList that)
    {
        bool equals = true;
        
        equals = equals && (this.RawQuery == null ? true : this.RawQuery.MemberwiseCompare(that.RawQuery));
        if (equals && this.Alterations != null && this.Alterations.Count != 0)
        {
            var enum_1_1 = this.Alterations.GetEnumerator();
            var enum_2_2 = that.Alterations.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_RawQuery, this.RawQuery, separator);
        sb.AppendFormat(format, __internal.s_Alterations, this.Alterations, separator);
        
        return sb.ToString();
    } // ToString()

}; // class AlterativeQueryList

/// <summary>
/// AugmentedQuery
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class AugmentedQuery : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional int32 QueryId
    private Int32 m_QueryId;

    // 2: Optional rDSN.Tron.App.StringQuery RawQuery
    private global::rDSN.Tron.App.StringQuery m_RawQuery;

    // 3: Optional rDSN.Tron.App.StringQuery AlteredQuery
    private global::rDSN.Tron.App.StringQuery m_AlteredQuery;

    // 4: Optional int32 TopX
    private Int32 m_TopX;

    /// <summary>
    /// QueryId
    /// </summary>
    public Int32 QueryId
    {
        get { return this.m_QueryId; }
        set { this.m_QueryId = value; }
    }

    /// <summary>
    /// RawQuery
    /// </summary>
    public global::rDSN.Tron.App.StringQuery RawQuery
    {
        get { return this.m_RawQuery; }
        set { this.m_RawQuery = value; }
    }

    /// <summary>
    /// AlteredQuery
    /// </summary>
    public global::rDSN.Tron.App.StringQuery AlteredQuery
    {
        get { return this.m_AlteredQuery; }
        set { this.m_AlteredQuery = value; }
    }

    /// <summary>
    /// TopX
    /// </summary>
    public Int32 TopX
    {
        get { return this.m_TopX; }
        set { this.m_TopX = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata QueryId_meta = new Metadata();
        public static readonly Metadata RawQuery_meta = new Metadata();
        public static readonly Metadata AlteredQuery_meta = new Metadata();
        public static readonly Metadata TopX_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("AugmentedQuery");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // QueryId
            QueryId_meta.name = "QueryId";
            QueryId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            QueryId_meta.default_value.int_value = 0;

            // RawQuery
            RawQuery_meta.name = "RawQuery";
            RawQuery_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AlteredQuery
            AlteredQuery_meta.name = "AlteredQuery";
            AlteredQuery_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // TopX
            TopX_meta.name = "TopX";
            TopX_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            TopX_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int QueryId = 1;
        public const int RawQuery = 2;
        public const int AlteredQuery = 3;
        public const int TopX = 4;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_QueryId = "QueryId";
        public const String s_RawQuery = "RawQuery";
        public const String s_AlteredQuery = "AlteredQuery";
        public const String s_TopX = "TopX";
    }   // ~__internal

    // Constructor
    public AugmentedQuery()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_QueryId = 0;
        m_RawQuery = new global::rDSN.Tron.App.StringQuery();
        m_AlteredQuery = new global::rDSN.Tron.App.StringQuery();
        m_TopX = 0;
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.AugmentedQuery cloned = new global::rDSN.Tron.App.AugmentedQuery();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.AugmentedQuery that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: int32 QueryId
        that.QueryId = this.QueryId;
        // 2: rDSN.Tron.App.StringQuery RawQuery
        that.RawQuery = (this.RawQuery == null ? null : (global::rDSN.Tron.App.StringQuery)this.RawQuery.Clone());
        // 3: rDSN.Tron.App.StringQuery AlteredQuery
        that.AlteredQuery = (this.AlteredQuery == null ? null : (global::rDSN.Tron.App.StringQuery)this.AlteredQuery.Clone());
        // 4: int32 TopX
        that.TopX = this.TopX;
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.QueryId = reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.RawQuery.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AlteredQuery.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TopX = reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.QueryId:  // id=1
                    this.QueryId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.RawQuery:  // id=2
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.RawQuery.Read(reader);
                    break;
                case __ordinals.AlteredQuery:  // id=3
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.AlteredQuery.Read(reader);
                    break;
                case __ordinals.TopX:  // id=4
                    this.TopX = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(AugmentedQuery))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.QueryId_meta.default_value.Equals(m_QueryId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.QueryId, Schema.QueryId_meta);
                writer.WriteInt32(m_QueryId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.QueryId, Schema.QueryId_meta);
        }

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.RawQuery, Schema.RawQuery_meta);
            m_RawQuery.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.AlteredQuery, Schema.AlteredQuery_meta);
            m_AlteredQuery.Write(writer, true);
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.TopX_meta.default_value.Equals(m_TopX)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.TopX, Schema.TopX_meta);
                writer.WriteInt32(m_TopX);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.TopX, Schema.TopX_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="QueryId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="RawQuery";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.App.StringQuery.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="AlteredQuery";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.App.StringQuery.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="TopX";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        AugmentedQuery that = obj as AugmentedQuery;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(AugmentedQuery other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(AugmentedQuery that)
    {
        bool equals = true;
        
        equals = equals && ((this.QueryId == that.QueryId));
        equals = equals && ((this.TopX == that.TopX));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(AugmentedQuery that)
    {
        bool equals = true;
        
        equals = equals && (this.RawQuery == null ? true : this.RawQuery.MemberwiseCompare(that.RawQuery));
        equals = equals && (this.AlteredQuery == null ? true : this.AlteredQuery.MemberwiseCompare(that.AlteredQuery));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_QueryId, this.QueryId, separator);
        sb.AppendFormat(format, __internal.s_RawQuery, this.RawQuery, separator);
        sb.AppendFormat(format, __internal.s_AlteredQuery, this.AlteredQuery, separator);
        sb.AppendFormat(format, __internal.s_TopX, this.TopX, separator);
        
        return sb.ToString();
    } // ToString()

}; // class AugmentedQuery

/// <summary>
/// DocId
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DocId : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional string URL
    private String m_URL;

    /// <summary>
    /// URL
    /// </summary>
    public String URL
    {
        get { return this.m_URL; }
        set { this.m_URL = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata URL_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DocId");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // URL
            URL_meta.name = "URL";
            URL_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int URL = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_URL = "URL";
    }   // ~__internal

    // Constructor
    public DocId()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_URL = string.Empty;
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.DocId cloned = new global::rDSN.Tron.App.DocId();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.DocId that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string URL
        that.URL = this.URL;
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.URL = reader.ReadString();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.URL:  // id=1
                    this.URL = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DocId))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.URL_meta.default_value.Equals(m_URL)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.URL, Schema.URL_meta);
                writer.WriteString(m_URL);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.URL, Schema.URL_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="URL";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DocId that = obj as DocId;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(DocId other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(DocId that)
    {
        bool equals = true;
        
        equals = equals && ((this.URL == null) == (that.URL == null));
        equals = equals && (this.URL == null ? true : (this.URL.Length == that.URL.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(DocId that)
    {
        bool equals = true;
        
        equals = equals && (this.URL == null ? true : this.URL == that.URL);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_URL, this.URL, separator);
        
        return sb.ToString();
    } // ToString()

}; // class DocId

/// <summary>
/// DocPosition
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DocPosition : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional rDSN.Tron.App.DocId DocIdentity
    private global::rDSN.Tron.App.DocId m_DocIdentity;

    // 2: Optional int32 Position
    private Int32 m_Position;

    /// <summary>
    /// DocIdentity
    /// </summary>
    public global::rDSN.Tron.App.DocId DocIdentity
    {
        get { return this.m_DocIdentity; }
        set { this.m_DocIdentity = value; }
    }

    /// <summary>
    /// Position
    /// </summary>
    public Int32 Position
    {
        get { return this.m_Position; }
        set { this.m_Position = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata DocIdentity_meta = new Metadata();
        public static readonly Metadata Position_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DocPosition");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // DocIdentity
            DocIdentity_meta.name = "DocIdentity";
            DocIdentity_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Position
            Position_meta.name = "Position";
            Position_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Position_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int DocIdentity = 1;
        public const int Position = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_DocIdentity = "DocIdentity";
        public const String s_Position = "Position";
    }   // ~__internal

    // Constructor
    public DocPosition()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_DocIdentity = new global::rDSN.Tron.App.DocId();
        m_Position = 0;
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.DocPosition cloned = new global::rDSN.Tron.App.DocPosition();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.DocPosition that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: rDSN.Tron.App.DocId DocIdentity
        that.DocIdentity = (this.DocIdentity == null ? null : (global::rDSN.Tron.App.DocId)this.DocIdentity.Clone());
        // 2: int32 Position
        that.Position = this.Position;
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.DocIdentity.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Position = reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.DocIdentity:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.DocIdentity.Read(reader);
                    break;
                case __ordinals.Position:  // id=2
                    this.Position = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DocPosition))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.DocIdentity, Schema.DocIdentity_meta);
            m_DocIdentity.Write(writer, true);
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.Position_meta.default_value.Equals(m_Position)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.Position, Schema.Position_meta);
                writer.WriteInt32(m_Position);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.Position, Schema.Position_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="DocIdentity";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.App.DocId.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Position";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DocPosition that = obj as DocPosition;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(DocPosition other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(DocPosition that)
    {
        bool equals = true;
        
        equals = equals && ((this.Position == that.Position));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(DocPosition that)
    {
        bool equals = true;
        
        equals = equals && (this.DocIdentity == null ? true : this.DocIdentity.MemberwiseCompare(that.DocIdentity));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_DocIdentity, this.DocIdentity, separator);
        sb.AppendFormat(format, __internal.s_Position, this.Position, separator);
        
        return sb.ToString();
    } // ToString()

}; // class DocPosition

/// <summary>
/// PerDocStaticRank
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class PerDocStaticRank : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional rDSN.Tron.App.DocPosition Pos
    private global::rDSN.Tron.App.DocPosition m_Pos;

    // 2: Optional int32 StaticRank
    private Int32 m_StaticRank;

    /// <summary>
    /// Pos
    /// </summary>
    public global::rDSN.Tron.App.DocPosition Pos
    {
        get { return this.m_Pos; }
        set { this.m_Pos = value; }
    }

    /// <summary>
    /// StaticRank
    /// </summary>
    public Int32 StaticRank
    {
        get { return this.m_StaticRank; }
        set { this.m_StaticRank = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Pos_meta = new Metadata();
        public static readonly Metadata StaticRank_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("PerDocStaticRank");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // Pos
            Pos_meta.name = "Pos";
            Pos_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // StaticRank
            StaticRank_meta.name = "StaticRank";
            StaticRank_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            StaticRank_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Pos = 1;
        public const int StaticRank = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Pos = "Pos";
        public const String s_StaticRank = "StaticRank";
    }   // ~__internal

    // Constructor
    public PerDocStaticRank()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Pos = new global::rDSN.Tron.App.DocPosition();
        m_StaticRank = 0;
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.PerDocStaticRank cloned = new global::rDSN.Tron.App.PerDocStaticRank();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.PerDocStaticRank that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: rDSN.Tron.App.DocPosition Pos
        that.Pos = (this.Pos == null ? null : (global::rDSN.Tron.App.DocPosition)this.Pos.Clone());
        // 2: int32 StaticRank
        that.StaticRank = this.StaticRank;
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Pos.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.StaticRank = reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Pos:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.Pos.Read(reader);
                    break;
                case __ordinals.StaticRank:  // id=2
                    this.StaticRank = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(PerDocStaticRank))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.Pos, Schema.Pos_meta);
            m_Pos.Write(writer, true);
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.StaticRank_meta.default_value.Equals(m_StaticRank)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.StaticRank, Schema.StaticRank_meta);
                writer.WriteInt32(m_StaticRank);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.StaticRank, Schema.StaticRank_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Pos";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.App.DocPosition.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="StaticRank";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        PerDocStaticRank that = obj as PerDocStaticRank;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(PerDocStaticRank other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(PerDocStaticRank that)
    {
        bool equals = true;
        
        equals = equals && ((this.StaticRank == that.StaticRank));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(PerDocStaticRank that)
    {
        bool equals = true;
        
        equals = equals && (this.Pos == null ? true : this.Pos.MemberwiseCompare(that.Pos));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Pos, this.Pos, separator);
        sb.AppendFormat(format, __internal.s_StaticRank, this.StaticRank, separator);
        
        return sb.ToString();
    } // ToString()

}; // class PerDocStaticRank

/// <summary>
/// StaticRankResult
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class StaticRankResult : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional rDSN.Tron.App.AugmentedQuery Query
    private global::rDSN.Tron.App.AugmentedQuery m_Query;

    // 2: Optional list<rDSN.Tron.App.PerDocStaticRank> Results
    private LinkedList<global::rDSN.Tron.App.PerDocStaticRank> m_Results;

    /// <summary>
    /// Query
    /// </summary>
    public global::rDSN.Tron.App.AugmentedQuery Query
    {
        get { return this.m_Query; }
        set { this.m_Query = value; }
    }

    /// <summary>
    /// Results
    /// </summary>
    public LinkedList<global::rDSN.Tron.App.PerDocStaticRank> Results
    {
        get { return this.m_Results; }
        set { this.m_Results = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Query_meta = new Metadata();
        public static readonly Metadata Results_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("StaticRankResult");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // Query
            Query_meta.name = "Query";
            Query_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Results
            Results_meta.name = "Results";
            Results_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Query = 1;
        public const int Results = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Query = "Query";
        public const String s_Results = "Results";
    }   // ~__internal

    // Constructor
    public StaticRankResult()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Query = new global::rDSN.Tron.App.AugmentedQuery();
        if (m_Results == null)
        {
            m_Results = new LinkedList<global::rDSN.Tron.App.PerDocStaticRank>();
        }
        else
        {
            m_Results.Clear();
        }
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.StaticRankResult cloned = new global::rDSN.Tron.App.StaticRankResult();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.StaticRankResult that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: rDSN.Tron.App.AugmentedQuery Query
        that.Query = (this.Query == null ? null : (global::rDSN.Tron.App.AugmentedQuery)this.Query.Clone());
        // 2: list<rDSN.Tron.App.PerDocStaticRank> Results
        if (this.Results != null)
        {
            if (that.Results == null)
            {
                that.Results = new LinkedList<global::rDSN.Tron.App.PerDocStaticRank>();
            }
            else
            {
                that.Results.Clear();
            }
            foreach (var iter1 in this.Results)
            {
                global::rDSN.Tron.App.PerDocStaticRank tmpItem2 = default(global::rDSN.Tron.App.PerDocStaticRank);
                tmpItem2 = (iter1 == null ? null : (global::rDSN.Tron.App.PerDocStaticRank)iter1.Clone());
                that.Results.AddLast(tmpItem2);
            }
        }
        else
        {
            that.Results = null;
        }
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Query.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Results(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Query:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.Query.Read(reader);
                    break;
                case __ordinals.Results:  // id=2
                    this.ReadField_impl_Results(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_Results(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::rDSN.Tron.App.PerDocStaticRank element3 = new global::rDSN.Tron.App.PerDocStaticRank();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_Results.AddLast(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Results


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(StaticRankResult))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.Query, Schema.Query_meta);
            m_Query.Write(writer, true);
        writer.WriteFieldEnd();
        UInt32 count1 = ((UInt32)m_Results.Count);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Results, Schema.Results_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            foreach (var item2 in m_Results)
            {
                    item2.Write(writer, true);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Results, Schema.Results_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Query";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.App.AugmentedQuery.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Results";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::rDSN.Tron.App.PerDocStaticRank.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        StaticRankResult that = obj as StaticRankResult;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(StaticRankResult other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(StaticRankResult that)
    {
        bool equals = true;
        
        equals = equals && ((this.Results == null) == (that.Results == null));
        equals = equals && ((this.Results == null) ? true : (this.Results.Count == that.Results.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(StaticRankResult that)
    {
        bool equals = true;
        
        equals = equals && (this.Query == null ? true : this.Query.MemberwiseCompare(that.Query));
        if (equals && this.Results != null && this.Results.Count != 0)
        {
            var enum_1_1 = this.Results.GetEnumerator();
            var enum_2_2 = that.Results.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Query, this.Query, separator);
        sb.AppendFormat(format, __internal.s_Results, this.Results, separator);
        
        return sb.ToString();
    } // ToString()

}; // class StaticRankResult

/// <summary>
/// PerDocRank
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class PerDocRank : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional rDSN.Tron.App.DocId Id
    private global::rDSN.Tron.App.DocId m_Id;

    // 2: Optional rDSN.Tron.App.Rank Rank
    private global::rDSN.Tron.App.Rank m_Rank;

    /// <summary>
    /// Id
    /// </summary>
    public global::rDSN.Tron.App.DocId Id
    {
        get { return this.m_Id; }
        set { this.m_Id = value; }
    }

    /// <summary>
    /// Rank
    /// </summary>
    public global::rDSN.Tron.App.Rank Rank
    {
        get { return this.m_Rank; }
        set { this.m_Rank = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Id_meta = new Metadata();
        public static readonly Metadata Rank_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("PerDocRank");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // Id
            Id_meta.name = "Id";
            Id_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Rank
            Rank_meta.name = "Rank";
            Rank_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Id = 1;
        public const int Rank = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Id = "Id";
        public const String s_Rank = "Rank";
    }   // ~__internal

    // Constructor
    public PerDocRank()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Id = new global::rDSN.Tron.App.DocId();
        m_Rank = new global::rDSN.Tron.App.Rank();
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.PerDocRank cloned = new global::rDSN.Tron.App.PerDocRank();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.PerDocRank that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: rDSN.Tron.App.DocId Id
        that.Id = (this.Id == null ? null : (global::rDSN.Tron.App.DocId)this.Id.Clone());
        // 2: rDSN.Tron.App.Rank Rank
        that.Rank = (this.Rank == null ? null : (global::rDSN.Tron.App.Rank)this.Rank.Clone());
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Id.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Rank.Read(reader);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Id:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.Id.Read(reader);
                    break;
                case __ordinals.Rank:  // id=2
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.Rank.Read(reader);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(PerDocRank))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.Id, Schema.Id_meta);
            m_Id.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.Rank, Schema.Rank_meta);
            m_Rank.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Id";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.App.DocId.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Rank";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.App.Rank.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        PerDocRank that = obj as PerDocRank;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(PerDocRank other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(PerDocRank that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(PerDocRank that)
    {
        bool equals = true;
        
        equals = equals && (this.Id == null ? true : this.Id.MemberwiseCompare(that.Id));
        equals = equals && (this.Rank == null ? true : this.Rank.MemberwiseCompare(that.Rank));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Id, this.Id, separator);
        sb.AppendFormat(format, __internal.s_Rank, this.Rank, separator);
        
        return sb.ToString();
    } // ToString()

}; // class PerDocRank

/// <summary>
/// Caption
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Caption : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional rDSN.Tron.App.DocId DocIdentifier
    private global::rDSN.Tron.App.DocId m_DocIdentifier;

    // 2: Optional string Title
    private String m_Title;

    // 3: Optional string CaptionHtml
    private String m_CaptionHtml;

    /// <summary>
    /// DocIdentifier
    /// </summary>
    public global::rDSN.Tron.App.DocId DocIdentifier
    {
        get { return this.m_DocIdentifier; }
        set { this.m_DocIdentifier = value; }
    }

    /// <summary>
    /// Title
    /// </summary>
    public String Title
    {
        get { return this.m_Title; }
        set { this.m_Title = value; }
    }

    /// <summary>
    /// CaptionHtml
    /// </summary>
    public String CaptionHtml
    {
        get { return this.m_CaptionHtml; }
        set { this.m_CaptionHtml = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata DocIdentifier_meta = new Metadata();
        public static readonly Metadata Title_meta = new Metadata();
        public static readonly Metadata CaptionHtml_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("Caption");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // DocIdentifier
            DocIdentifier_meta.name = "DocIdentifier";
            DocIdentifier_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Title
            Title_meta.name = "Title";
            Title_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CaptionHtml
            CaptionHtml_meta.name = "CaptionHtml";
            CaptionHtml_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int DocIdentifier = 1;
        public const int Title = 2;
        public const int CaptionHtml = 3;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_DocIdentifier = "DocIdentifier";
        public const String s_Title = "Title";
        public const String s_CaptionHtml = "CaptionHtml";
    }   // ~__internal

    // Constructor
    public Caption()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_DocIdentifier = new global::rDSN.Tron.App.DocId();
        m_Title = string.Empty;
        m_CaptionHtml = string.Empty;
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.Caption cloned = new global::rDSN.Tron.App.Caption();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.Caption that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: rDSN.Tron.App.DocId DocIdentifier
        that.DocIdentifier = (this.DocIdentifier == null ? null : (global::rDSN.Tron.App.DocId)this.DocIdentifier.Clone());
        // 2: string Title
        that.Title = this.Title;
        // 3: string CaptionHtml
        that.CaptionHtml = this.CaptionHtml;
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.DocIdentifier.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Title = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.CaptionHtml = reader.ReadString();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.DocIdentifier:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.DocIdentifier.Read(reader);
                    break;
                case __ordinals.Title:  // id=2
                    this.Title = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.CaptionHtml:  // id=3
                    this.CaptionHtml = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(Caption))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.DocIdentifier, Schema.DocIdentifier_meta);
            m_DocIdentifier.Write(writer, true);
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.Title_meta.default_value.Equals(m_Title)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Title, Schema.Title_meta);
                writer.WriteString(m_Title);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Title, Schema.Title_meta);
        }

        if (writeAllFields || (!Schema.CaptionHtml_meta.default_value.Equals(m_CaptionHtml)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.CaptionHtml, Schema.CaptionHtml_meta);
                writer.WriteString(m_CaptionHtml);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.CaptionHtml, Schema.CaptionHtml_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="DocIdentifier";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.App.DocId.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Title";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="CaptionHtml";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Caption that = obj as Caption;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(Caption other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(Caption that)
    {
        bool equals = true;
        
        equals = equals && ((this.Title == null) == (that.Title == null));
        equals = equals && (this.Title == null ? true : (this.Title.Length == that.Title.Length));
        equals = equals && ((this.CaptionHtml == null) == (that.CaptionHtml == null));
        equals = equals && (this.CaptionHtml == null ? true : (this.CaptionHtml.Length == that.CaptionHtml.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(Caption that)
    {
        bool equals = true;
        
        equals = equals && (this.DocIdentifier == null ? true : this.DocIdentifier.MemberwiseCompare(that.DocIdentifier));
        equals = equals && (this.Title == null ? true : this.Title == that.Title);
        equals = equals && (this.CaptionHtml == null ? true : this.CaptionHtml == that.CaptionHtml);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_DocIdentifier, this.DocIdentifier, separator);
        sb.AppendFormat(format, __internal.s_Title, this.Title, separator);
        sb.AppendFormat(format, __internal.s_CaptionHtml, this.CaptionHtml, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Caption

/// <summary>
/// QueryResult
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class QueryResult : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional rDSN.Tron.App.StringQuery RawQuery
    private global::rDSN.Tron.App.StringQuery m_RawQuery;

    // 2: Optional rDSN.Tron.App.AugmentedQuery Query
    private global::rDSN.Tron.App.AugmentedQuery m_Query;

    // 3: Optional vector<rDSN.Tron.App.Caption> Results
    private List<global::rDSN.Tron.App.Caption> m_Results;

    /// <summary>
    /// RawQuery
    /// </summary>
    public global::rDSN.Tron.App.StringQuery RawQuery
    {
        get { return this.m_RawQuery; }
        set { this.m_RawQuery = value; }
    }

    /// <summary>
    /// Query
    /// </summary>
    public global::rDSN.Tron.App.AugmentedQuery Query
    {
        get { return this.m_Query; }
        set { this.m_Query = value; }
    }

    /// <summary>
    /// Results
    /// </summary>
    public List<global::rDSN.Tron.App.Caption> Results
    {
        get { return this.m_Results; }
        set { this.m_Results = value; }
    }

    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata RawQuery_meta = new Metadata();
        public static readonly Metadata Query_meta = new Metadata();
        public static readonly Metadata Results_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("QueryResult");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "rDSN.Tron.App." + meta.name;


            // RawQuery
            RawQuery_meta.name = "RawQuery";
            RawQuery_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Query
            Query_meta.name = "Query";
            Query_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Results
            Results_meta.name = "Results";
            Results_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int RawQuery = 1;
        public const int Query = 2;
        public const int Results = 3;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_RawQuery = "RawQuery";
        public const String s_Query = "Query";
        public const String s_Results = "Results";
    }   // ~__internal

    // Constructor
    public QueryResult()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_RawQuery = new global::rDSN.Tron.App.StringQuery();
        m_Query = new global::rDSN.Tron.App.AugmentedQuery();
        if (m_Results == null)
        {
            m_Results = new List<global::rDSN.Tron.App.Caption>();
        }
        else
        {
            m_Results.Clear();
        }
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::rDSN.Tron.App.QueryResult cloned = new global::rDSN.Tron.App.QueryResult();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::rDSN.Tron.App.QueryResult that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: rDSN.Tron.App.StringQuery RawQuery
        that.RawQuery = (this.RawQuery == null ? null : (global::rDSN.Tron.App.StringQuery)this.RawQuery.Clone());
        // 2: rDSN.Tron.App.AugmentedQuery Query
        that.Query = (this.Query == null ? null : (global::rDSN.Tron.App.AugmentedQuery)this.Query.Clone());
        // 3: vector<rDSN.Tron.App.Caption> Results
        if (this.Results != null)
        {
            if (that.Results == null)
            {
                that.Results = new List<global::rDSN.Tron.App.Caption>();
            }
            else
            {
                that.Results.Clear();
            }
            foreach (var iter1 in this.Results)
            {
                global::rDSN.Tron.App.Caption tmpItem2 = default(global::rDSN.Tron.App.Caption);
                tmpItem2 = (iter1 == null ? null : (global::rDSN.Tron.App.Caption)iter1.Clone());
                that.Results.Add(tmpItem2);
            }
        }
        else
        {
            that.Results = null;
        }
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.RawQuery.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Query.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Results(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.RawQuery:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.RawQuery.Read(reader);
                    break;
                case __ordinals.Query:  // id=2
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.Query.Read(reader);
                    break;
                case __ordinals.Results:  // id=3
                    this.ReadField_impl_Results(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_Results(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_Results.Capacity < count2)
        {
            this.m_Results.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::rDSN.Tron.App.Caption element3 = new global::rDSN.Tron.App.Caption();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_Results.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Results


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(QueryResult))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.RawQuery, Schema.RawQuery_meta);
            m_RawQuery.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.Query, Schema.Query_meta);
            m_Query.Write(writer, true);
        writer.WriteFieldEnd();
        UInt32 count1 = ((UInt32)m_Results.Count);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Results, Schema.Results_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx2 = 0; idx2 < count1; idx2++)
            {
                    m_Results[idx2].Write(writer, true);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Results, Schema.Results_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="RawQuery";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.App.StringQuery.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Query";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::rDSN.Tron.App.AugmentedQuery.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="Results";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::rDSN.Tron.App.Caption.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        QueryResult that = obj as QueryResult;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(QueryResult other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(QueryResult that)
    {
        bool equals = true;
        
        equals = equals && ((this.Results == null) == (that.Results == null));
        equals = equals && ((this.Results == null) ? true : (this.Results.Count == that.Results.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(QueryResult that)
    {
        bool equals = true;
        
        equals = equals && (this.RawQuery == null ? true : this.RawQuery.MemberwiseCompare(that.RawQuery));
        equals = equals && (this.Query == null ? true : this.Query.MemberwiseCompare(that.Query));
        if (equals && this.Results != null && this.Results.Count != 0)
        {
            var enum_1_1 = this.Results.GetEnumerator();
            var enum_2_2 = that.Results.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_RawQuery, this.RawQuery, separator);
        sb.AppendFormat(format, __internal.s_Query, this.Query, separator);
        sb.AppendFormat(format, __internal.s_Results, DumpList(this.Results), separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class QueryResult
} // namespace App
} // namespace Tron
} // namespace rDSN
