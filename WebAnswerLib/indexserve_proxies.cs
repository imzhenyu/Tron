/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Microsoft Corporation
 * 
 * -=- Robust Distributed System Nucleus (rDSN) -=- 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 * Description:
 *     What is this file about?
 *
 * Revision history:
 *     Feb., 2016, @imzhenyu (Zhenyu Guo), done in Tron project and copied here
 *     xxxx-xx-xx, author, fix bug about xxx
 */
 
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : indexserve_proxies.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::BondTransport;
using global::BondNetlibTransport;
using global::Microsoft.Bond;
using global::System;
using global::System.Collections.Generic;

namespace rDSN
{
namespace Tron
{
namespace App
{

///<summary>
/// SpellChecker
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public class SpellChecker_Proxy : BondTransport.BondProxy
{
    //
    // Constructors
    //
    public SpellChecker_Proxy(IBondTransportClient client) : base(client, "Microsoft::Tron::App.SpellChecker")
    {
    }

    public SpellChecker_Proxy(IBondTransportClient client, string serviceName) : base(client, serviceName)
    {
    }

    public global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckResponse> Check(global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckRequest> input)
    {
        return Check(input, Infinite);
    }

    public virtual global::rDSN.Tron.App.SpellCheckResponse Check(global::rDSN.Tron.App.SpellCheckRequest input)
    {
        return Check(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckResponse> Check(global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckRequest> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginCheck(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndCheck(asyncResult);
        }
        CancelCheck(asyncResult);
        throw new global::System.TimeoutException("Check");
    }

    public global::rDSN.Tron.App.SpellCheckResponse Check(global::rDSN.Tron.App.SpellCheckRequest input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckRequest> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckRequest>(input);

        global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckResponse> resultMsg = Check(inputMsg, timeout);
        global::rDSN.Tron.App.SpellCheckResponse result = new global::rDSN.Tron.App.SpellCheckResponse();
        resultMsg.Payload.Deserialize(result);
        return result;
    }

    //
    // Async invocation of Check.
    //

    public IAsyncResult BeginCheck(global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckRequest> input)
    {
        return BeginCheck(input, null, null);
    }

    public IAsyncResult BeginCheck(global::rDSN.Tron.App.SpellCheckRequest input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckRequest> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckRequest>(input);
        return BeginCheck(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginCheck(global::rDSN.Tron.App.SpellCheckRequest input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckRequest> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckRequest>(input);
        return BeginCheck(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginCheck(global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckRequest> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.App.SpellCheckRequest>("Check", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.SpellCheckResponse> EndCheck(IAsyncResult asyncResult)
    {
        return EndRequest<global::rDSN.Tron.App.SpellCheckResponse>("Check", asyncResult);
    }

    public void CancelCheck(IAsyncResult asyncResult)
    {
        CancelRequest("Check", asyncResult);
    }

}    // ~ SpellChecker_Proxy

///<summary>
/// IFEX
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public class IFEX_Proxy : BondTransport.BondProxy
{
    //
    // Constructors
    //
    public IFEX_Proxy(IBondTransportClient client) : base(client, "Microsoft::Tron::App.IFEX")
    {
    }

    public IFEX_Proxy(IBondTransportClient client, string serviceName) : base(client, serviceName)
    {
    }

    public global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> OnSearchQuery(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input)
    {
        return OnSearchQuery(input, Infinite);
    }

    public virtual global::rDSN.Tron.App.StringQuery OnSearchQuery(global::rDSN.Tron.App.StringQuery input)
    {
        return OnSearchQuery(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> OnSearchQuery(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginOnSearchQuery(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndOnSearchQuery(asyncResult);
        }
        CancelOnSearchQuery(asyncResult);
        throw new global::System.TimeoutException("OnSearchQuery");
    }

    public global::rDSN.Tron.App.StringQuery OnSearchQuery(global::rDSN.Tron.App.StringQuery input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery>(input);

        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> resultMsg = OnSearchQuery(inputMsg, timeout);
        global::rDSN.Tron.App.StringQuery result = new global::rDSN.Tron.App.StringQuery();
        resultMsg.Payload.Deserialize(result);
        return result;
    }

    //
    // Async invocation of OnSearchQuery.
    //

    public IAsyncResult BeginOnSearchQuery(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input)
    {
        return BeginOnSearchQuery(input, null, null);
    }

    public IAsyncResult BeginOnSearchQuery(global::rDSN.Tron.App.StringQuery input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery>(input);
        return BeginOnSearchQuery(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginOnSearchQuery(global::rDSN.Tron.App.StringQuery input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery>(input);
        return BeginOnSearchQuery(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginOnSearchQuery(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.App.StringQuery>("OnSearchQuery", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> EndOnSearchQuery(IAsyncResult asyncResult)
    {
        return EndRequest<global::rDSN.Tron.App.StringQuery>("OnSearchQuery", asyncResult);
    }

    public void CancelOnSearchQuery(IAsyncResult asyncResult)
    {
        CancelRequest("OnSearchQuery", asyncResult);
    }

}    // ~ IFEX_Proxy

///<summary>
/// ALTA
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public class ALTA_Proxy : BondTransport.BondProxy
{
    //
    // Constructors
    //
    public ALTA_Proxy(IBondTransportClient client) : base(client, "Microsoft::Tron::App.ALTA")
    {
    }

    public ALTA_Proxy(IBondTransportClient client, string serviceName) : base(client, serviceName)
    {
    }
}    // ~ ALTA_Proxy

///<summary>
/// IsCache
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public class IsCache_Proxy : BondTransport.BondProxy
{
    //
    // Constructors
    //
    public IsCache_Proxy(IBondTransportClient client) : base(client, "Microsoft::Tron::App.IsCache")
    {
    }

    public IsCache_Proxy(IBondTransportClient client, string serviceName) : base(client, serviceName)
    {
    }

    public global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> Get(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input)
    {
        return Get(input, Infinite);
    }

    public virtual global::rDSN.Tron.App.QueryResult Get(global::rDSN.Tron.App.StringQuery input)
    {
        return Get(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> Get(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginGet(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndGet(asyncResult);
        }
        CancelGet(asyncResult);
        throw new global::System.TimeoutException("Get");
    }

    public global::rDSN.Tron.App.QueryResult Get(global::rDSN.Tron.App.StringQuery input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery>(input);

        global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> resultMsg = Get(inputMsg, timeout);
        global::rDSN.Tron.App.QueryResult result = new global::rDSN.Tron.App.QueryResult();
        resultMsg.Payload.Deserialize(result);
        return result;
    }

    //
    // Async invocation of Get.
    //

    public IAsyncResult BeginGet(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input)
    {
        return BeginGet(input, null, null);
    }

    public IAsyncResult BeginGet(global::rDSN.Tron.App.StringQuery input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery>(input);
        return BeginGet(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginGet(global::rDSN.Tron.App.StringQuery input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery>(input);
        return BeginGet(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginGet(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.App.StringQuery>("Get", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> EndGet(IAsyncResult asyncResult)
    {
        return EndRequest<global::rDSN.Tron.App.QueryResult>("Get", asyncResult);
    }

    public void CancelGet(IAsyncResult asyncResult)
    {
        CancelRequest("Get", asyncResult);
    }


    public global::Microsoft.Bond.Message<global::rDSN.Tron.App.ErrorResult> Put(global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> input)
    {
        return Put(input, Infinite);
    }

    public virtual global::rDSN.Tron.App.ErrorResult Put(global::rDSN.Tron.App.QueryResult input)
    {
        return Put(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.ErrorResult> Put(global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginPut(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndPut(asyncResult);
        }
        CancelPut(asyncResult);
        throw new global::System.TimeoutException("Put");
    }

    public global::rDSN.Tron.App.ErrorResult Put(global::rDSN.Tron.App.QueryResult input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult>(input);

        global::Microsoft.Bond.Message<global::rDSN.Tron.App.ErrorResult> resultMsg = Put(inputMsg, timeout);
        global::rDSN.Tron.App.ErrorResult result = new global::rDSN.Tron.App.ErrorResult();
        resultMsg.Payload.Deserialize(result);
        return result;
    }

    //
    // Async invocation of Put.
    //

    public IAsyncResult BeginPut(global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> input)
    {
        return BeginPut(input, null, null);
    }

    public IAsyncResult BeginPut(global::rDSN.Tron.App.QueryResult input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult>(input);
        return BeginPut(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginPut(global::rDSN.Tron.App.QueryResult input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult>(input);
        return BeginPut(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginPut(global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.App.QueryResult>("Put", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.ErrorResult> EndPut(IAsyncResult asyncResult)
    {
        return EndRequest<global::rDSN.Tron.App.ErrorResult>("Put", asyncResult);
    }

    public void CancelPut(IAsyncResult asyncResult)
    {
        CancelRequest("Put", asyncResult);
    }

}    // ~ IsCache_Proxy

///<summary>
/// QU
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public class QU_Proxy : BondTransport.BondProxy
{
    //
    // Constructors
    //
    public QU_Proxy(IBondTransportClient client) : base(client, "Microsoft::Tron::App.QU")
    {
    }

    public QU_Proxy(IBondTransportClient client, string serviceName) : base(client, serviceName)
    {
    }

    public global::Microsoft.Bond.Message<global::rDSN.Tron.App.AlterativeQueryList> OnQueryUnderstanding(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input)
    {
        return OnQueryUnderstanding(input, Infinite);
    }

    public virtual global::rDSN.Tron.App.AlterativeQueryList OnQueryUnderstanding(global::rDSN.Tron.App.StringQuery input)
    {
        return OnQueryUnderstanding(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.AlterativeQueryList> OnQueryUnderstanding(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginOnQueryUnderstanding(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndOnQueryUnderstanding(asyncResult);
        }
        CancelOnQueryUnderstanding(asyncResult);
        throw new global::System.TimeoutException("OnQueryUnderstanding");
    }

    public global::rDSN.Tron.App.AlterativeQueryList OnQueryUnderstanding(global::rDSN.Tron.App.StringQuery input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery>(input);

        global::Microsoft.Bond.Message<global::rDSN.Tron.App.AlterativeQueryList> resultMsg = OnQueryUnderstanding(inputMsg, timeout);
        global::rDSN.Tron.App.AlterativeQueryList result = new global::rDSN.Tron.App.AlterativeQueryList();
        resultMsg.Payload.Deserialize(result);
        return result;
    }

    //
    // Async invocation of OnQueryUnderstanding.
    //

    public IAsyncResult BeginOnQueryUnderstanding(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input)
    {
        return BeginOnQueryUnderstanding(input, null, null);
    }

    public IAsyncResult BeginOnQueryUnderstanding(global::rDSN.Tron.App.StringQuery input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery>(input);
        return BeginOnQueryUnderstanding(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginOnQueryUnderstanding(global::rDSN.Tron.App.StringQuery input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery>(input);
        return BeginOnQueryUnderstanding(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginOnQueryUnderstanding(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.App.StringQuery>("OnQueryUnderstanding", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.AlterativeQueryList> EndOnQueryUnderstanding(IAsyncResult asyncResult)
    {
        return EndRequest<global::rDSN.Tron.App.AlterativeQueryList>("OnQueryUnderstanding", asyncResult);
    }

    public void CancelOnQueryUnderstanding(IAsyncResult asyncResult)
    {
        CancelRequest("OnQueryUnderstanding", asyncResult);
    }

}    // ~ QU_Proxy

///<summary>
/// QU2
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public class QU2_Proxy : BondTransport.BondProxy
{
    //
    // Constructors
    //
    public QU2_Proxy(IBondTransportClient client) : base(client, "Microsoft::Tron::App.QU2")
    {
    }

    public QU2_Proxy(IBondTransportClient client, string serviceName) : base(client, serviceName)
    {
    }

    public global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> OnQueryAnnotation(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input)
    {
        return OnQueryAnnotation(input, Infinite);
    }

    public virtual global::rDSN.Tron.App.AugmentedQuery OnQueryAnnotation(global::rDSN.Tron.App.StringQuery input)
    {
        return OnQueryAnnotation(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> OnQueryAnnotation(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginOnQueryAnnotation(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndOnQueryAnnotation(asyncResult);
        }
        CancelOnQueryAnnotation(asyncResult);
        throw new global::System.TimeoutException("OnQueryAnnotation");
    }

    public global::rDSN.Tron.App.AugmentedQuery OnQueryAnnotation(global::rDSN.Tron.App.StringQuery input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery>(input);

        global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> resultMsg = OnQueryAnnotation(inputMsg, timeout);
        global::rDSN.Tron.App.AugmentedQuery result = new global::rDSN.Tron.App.AugmentedQuery();
        resultMsg.Payload.Deserialize(result);
        return result;
    }

    //
    // Async invocation of OnQueryAnnotation.
    //

    public IAsyncResult BeginOnQueryAnnotation(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input)
    {
        return BeginOnQueryAnnotation(input, null, null);
    }

    public IAsyncResult BeginOnQueryAnnotation(global::rDSN.Tron.App.StringQuery input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery>(input);
        return BeginOnQueryAnnotation(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginOnQueryAnnotation(global::rDSN.Tron.App.StringQuery input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery>(input);
        return BeginOnQueryAnnotation(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginOnQueryAnnotation(global::Microsoft.Bond.Message<global::rDSN.Tron.App.StringQuery> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.App.StringQuery>("OnQueryAnnotation", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> EndOnQueryAnnotation(IAsyncResult asyncResult)
    {
        return EndRequest<global::rDSN.Tron.App.AugmentedQuery>("OnQueryAnnotation", asyncResult);
    }

    public void CancelOnQueryAnnotation(IAsyncResult asyncResult)
    {
        CancelRequest("OnQueryAnnotation", asyncResult);
    }

}    // ~ QU2_Proxy

///<summary>
/// TLA
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public class TLA_Proxy : BondTransport.BondProxy
{
    //
    // Constructors
    //
    public TLA_Proxy(IBondTransportClient client) : base(client, "Microsoft::Tron::App.TLA")
    {
    }

    public TLA_Proxy(IBondTransportClient client, string serviceName) : base(client, serviceName)
    {
    }
}    // ~ TLA_Proxy

///<summary>
/// WebCache
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public class WebCache_Proxy : BondTransport.BondProxy
{
    //
    // Constructors
    //
    public WebCache_Proxy(IBondTransportClient client) : base(client, "Microsoft::Tron::App.WebCache")
    {
    }

    public WebCache_Proxy(IBondTransportClient client, string serviceName) : base(client, serviceName)
    {
    }

    public global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> Get(global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> input)
    {
        return Get(input, Infinite);
    }

    public virtual global::rDSN.Tron.App.QueryResult Get(global::rDSN.Tron.App.AugmentedQuery input)
    {
        return Get(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> Get(global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginGet(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndGet(asyncResult);
        }
        CancelGet(asyncResult);
        throw new global::System.TimeoutException("Get");
    }

    public global::rDSN.Tron.App.QueryResult Get(global::rDSN.Tron.App.AugmentedQuery input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery>(input);

        global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> resultMsg = Get(inputMsg, timeout);
        global::rDSN.Tron.App.QueryResult result = new global::rDSN.Tron.App.QueryResult();
        resultMsg.Payload.Deserialize(result);
        return result;
    }

    //
    // Async invocation of Get.
    //

    public IAsyncResult BeginGet(global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> input)
    {
        return BeginGet(input, null, null);
    }

    public IAsyncResult BeginGet(global::rDSN.Tron.App.AugmentedQuery input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery>(input);
        return BeginGet(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginGet(global::rDSN.Tron.App.AugmentedQuery input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery>(input);
        return BeginGet(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginGet(global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.App.AugmentedQuery>("Get", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> EndGet(IAsyncResult asyncResult)
    {
        return EndRequest<global::rDSN.Tron.App.QueryResult>("Get", asyncResult);
    }

    public void CancelGet(IAsyncResult asyncResult)
    {
        CancelRequest("Get", asyncResult);
    }


    public global::Microsoft.Bond.Message<global::rDSN.Tron.App.ErrorResult> Put(global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> input)
    {
        return Put(input, Infinite);
    }

    public virtual global::rDSN.Tron.App.ErrorResult Put(global::rDSN.Tron.App.QueryResult input)
    {
        return Put(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.ErrorResult> Put(global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginPut(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndPut(asyncResult);
        }
        CancelPut(asyncResult);
        throw new global::System.TimeoutException("Put");
    }

    public global::rDSN.Tron.App.ErrorResult Put(global::rDSN.Tron.App.QueryResult input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult>(input);

        global::Microsoft.Bond.Message<global::rDSN.Tron.App.ErrorResult> resultMsg = Put(inputMsg, timeout);
        global::rDSN.Tron.App.ErrorResult result = new global::rDSN.Tron.App.ErrorResult();
        resultMsg.Payload.Deserialize(result);
        return result;
    }

    //
    // Async invocation of Put.
    //

    public IAsyncResult BeginPut(global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> input)
    {
        return BeginPut(input, null, null);
    }

    public IAsyncResult BeginPut(global::rDSN.Tron.App.QueryResult input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult>(input);
        return BeginPut(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginPut(global::rDSN.Tron.App.QueryResult input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult>(input);
        return BeginPut(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginPut(global::Microsoft.Bond.Message<global::rDSN.Tron.App.QueryResult> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.App.QueryResult>("Put", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.ErrorResult> EndPut(IAsyncResult asyncResult)
    {
        return EndRequest<global::rDSN.Tron.App.ErrorResult>("Put", asyncResult);
    }

    public void CancelPut(IAsyncResult asyncResult)
    {
        CancelRequest("Put", asyncResult);
    }

}    // ~ WebCache_Proxy

///<summary>
/// SaaS
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public class SaaS_Proxy : BondTransport.BondProxy
{
    //
    // Constructors
    //
    public SaaS_Proxy(IBondTransportClient client) : base(client, "Microsoft::Tron::App.SaaS")
    {
    }

    public SaaS_Proxy(IBondTransportClient client, string serviceName) : base(client, serviceName)
    {
    }

    public global::Microsoft.Bond.Message<global::rDSN.Tron.App.StaticRankResult> OnL1Selection(global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> input)
    {
        return OnL1Selection(input, Infinite);
    }

    public virtual global::rDSN.Tron.App.StaticRankResult OnL1Selection(global::rDSN.Tron.App.AugmentedQuery input)
    {
        return OnL1Selection(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.StaticRankResult> OnL1Selection(global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginOnL1Selection(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndOnL1Selection(asyncResult);
        }
        CancelOnL1Selection(asyncResult);
        throw new global::System.TimeoutException("OnL1Selection");
    }

    public global::rDSN.Tron.App.StaticRankResult OnL1Selection(global::rDSN.Tron.App.AugmentedQuery input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery>(input);

        global::Microsoft.Bond.Message<global::rDSN.Tron.App.StaticRankResult> resultMsg = OnL1Selection(inputMsg, timeout);
        global::rDSN.Tron.App.StaticRankResult result = new global::rDSN.Tron.App.StaticRankResult();
        resultMsg.Payload.Deserialize(result);
        return result;
    }

    //
    // Async invocation of OnL1Selection.
    //

    public IAsyncResult BeginOnL1Selection(global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> input)
    {
        return BeginOnL1Selection(input, null, null);
    }

    public IAsyncResult BeginOnL1Selection(global::rDSN.Tron.App.AugmentedQuery input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery>(input);
        return BeginOnL1Selection(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginOnL1Selection(global::rDSN.Tron.App.AugmentedQuery input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery>(input);
        return BeginOnL1Selection(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginOnL1Selection(global::Microsoft.Bond.Message<global::rDSN.Tron.App.AugmentedQuery> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.App.AugmentedQuery>("OnL1Selection", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.StaticRankResult> EndOnL1Selection(IAsyncResult asyncResult)
    {
        return EndRequest<global::rDSN.Tron.App.StaticRankResult>("OnL1Selection", asyncResult);
    }

    public void CancelOnL1Selection(IAsyncResult asyncResult)
    {
        CancelRequest("OnL1Selection", asyncResult);
    }

}    // ~ SaaS_Proxy

///<summary>
/// RaaS
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public class RaaS_Proxy : BondTransport.BondProxy
{
    //
    // Constructors
    //
    public RaaS_Proxy(IBondTransportClient client) : base(client, "Microsoft::Tron::App.RaaS")
    {
    }

    public RaaS_Proxy(IBondTransportClient client, string serviceName) : base(client, serviceName)
    {
    }

    public global::Microsoft.Bond.Message<global::rDSN.Tron.App.Rank> OnL2Rank(global::Microsoft.Bond.Message<global::rDSN.Tron.App.PerDocStaticRank> input)
    {
        return OnL2Rank(input, Infinite);
    }

    public virtual global::rDSN.Tron.App.Rank OnL2Rank(global::rDSN.Tron.App.PerDocStaticRank input)
    {
        return OnL2Rank(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.Rank> OnL2Rank(global::Microsoft.Bond.Message<global::rDSN.Tron.App.PerDocStaticRank> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginOnL2Rank(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndOnL2Rank(asyncResult);
        }
        CancelOnL2Rank(asyncResult);
        throw new global::System.TimeoutException("OnL2Rank");
    }

    public global::rDSN.Tron.App.Rank OnL2Rank(global::rDSN.Tron.App.PerDocStaticRank input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.PerDocStaticRank> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.PerDocStaticRank>(input);

        global::Microsoft.Bond.Message<global::rDSN.Tron.App.Rank> resultMsg = OnL2Rank(inputMsg, timeout);
        global::rDSN.Tron.App.Rank result = new global::rDSN.Tron.App.Rank();
        resultMsg.Payload.Deserialize(result);
        return result;
    }

    //
    // Async invocation of OnL2Rank.
    //

    public IAsyncResult BeginOnL2Rank(global::Microsoft.Bond.Message<global::rDSN.Tron.App.PerDocStaticRank> input)
    {
        return BeginOnL2Rank(input, null, null);
    }

    public IAsyncResult BeginOnL2Rank(global::rDSN.Tron.App.PerDocStaticRank input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.PerDocStaticRank> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.PerDocStaticRank>(input);
        return BeginOnL2Rank(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginOnL2Rank(global::rDSN.Tron.App.PerDocStaticRank input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.PerDocStaticRank> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.PerDocStaticRank>(input);
        return BeginOnL2Rank(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginOnL2Rank(global::Microsoft.Bond.Message<global::rDSN.Tron.App.PerDocStaticRank> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.App.PerDocStaticRank>("OnL2Rank", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.Rank> EndOnL2Rank(IAsyncResult asyncResult)
    {
        return EndRequest<global::rDSN.Tron.App.Rank>("OnL2Rank", asyncResult);
    }

    public void CancelOnL2Rank(IAsyncResult asyncResult)
    {
        CancelRequest("OnL2Rank", asyncResult);
    }

}    // ~ RaaS_Proxy

///<summary>
/// CDG
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public class CDG_Proxy : BondTransport.BondProxy
{
    //
    // Constructors
    //
    public CDG_Proxy(IBondTransportClient client) : base(client, "Microsoft::Tron::App.CDG")
    {
    }

    public CDG_Proxy(IBondTransportClient client, string serviceName) : base(client, serviceName)
    {
    }

    public global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption> Get(global::Microsoft.Bond.Message<global::rDSN.Tron.App.DocId> input)
    {
        return Get(input, Infinite);
    }

    public virtual global::rDSN.Tron.App.Caption Get(global::rDSN.Tron.App.DocId input)
    {
        return Get(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption> Get(global::Microsoft.Bond.Message<global::rDSN.Tron.App.DocId> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginGet(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndGet(asyncResult);
        }
        CancelGet(asyncResult);
        throw new global::System.TimeoutException("Get");
    }

    public global::rDSN.Tron.App.Caption Get(global::rDSN.Tron.App.DocId input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.DocId> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.DocId>(input);

        global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption> resultMsg = Get(inputMsg, timeout);
        global::rDSN.Tron.App.Caption result = new global::rDSN.Tron.App.Caption();
        resultMsg.Payload.Deserialize(result);
        return result;
    }

    //
    // Async invocation of Get.
    //

    public IAsyncResult BeginGet(global::Microsoft.Bond.Message<global::rDSN.Tron.App.DocId> input)
    {
        return BeginGet(input, null, null);
    }

    public IAsyncResult BeginGet(global::rDSN.Tron.App.DocId input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.DocId> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.DocId>(input);
        return BeginGet(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginGet(global::rDSN.Tron.App.DocId input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.DocId> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.DocId>(input);
        return BeginGet(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginGet(global::Microsoft.Bond.Message<global::rDSN.Tron.App.DocId> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.App.DocId>("Get", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption> EndGet(IAsyncResult asyncResult)
    {
        return EndRequest<global::rDSN.Tron.App.Caption>("Get", asyncResult);
    }

    public void CancelGet(IAsyncResult asyncResult)
    {
        CancelRequest("Get", asyncResult);
    }


    public global::Microsoft.Bond.Message<global::rDSN.Tron.App.ErrorResult> Put(global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption> input)
    {
        return Put(input, Infinite);
    }

    public virtual global::rDSN.Tron.App.ErrorResult Put(global::rDSN.Tron.App.Caption input)
    {
        return Put(input, Infinite);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.ErrorResult> Put(global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption> input, TimeSpan timeout)
    {
        IAsyncResult asyncResult = BeginPut(input);
        if (asyncResult.AsyncWaitHandle.WaitOne(timeout, false))
        {
            return EndPut(asyncResult);
        }
        CancelPut(asyncResult);
        throw new global::System.TimeoutException("Put");
    }

    public global::rDSN.Tron.App.ErrorResult Put(global::rDSN.Tron.App.Caption input, TimeSpan timeout)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption>(input);

        global::Microsoft.Bond.Message<global::rDSN.Tron.App.ErrorResult> resultMsg = Put(inputMsg, timeout);
        global::rDSN.Tron.App.ErrorResult result = new global::rDSN.Tron.App.ErrorResult();
        resultMsg.Payload.Deserialize(result);
        return result;
    }

    //
    // Async invocation of Put.
    //

    public IAsyncResult BeginPut(global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption> input)
    {
        return BeginPut(input, null, null);
    }

    public IAsyncResult BeginPut(global::rDSN.Tron.App.Caption input)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption>(input);
        return BeginPut(inputMsg, null, null);
    }

    public virtual IAsyncResult BeginPut(global::rDSN.Tron.App.Caption input, AsyncCallback userCallback, object stateObject)
    {
        global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption> inputMsg = new global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption>(input);
        return BeginPut(inputMsg, userCallback, stateObject);
    }

    public virtual IAsyncResult BeginPut(global::Microsoft.Bond.Message<global::rDSN.Tron.App.Caption> input, AsyncCallback userCallback, Object stateObject)
    {
        return BeginRequest<global::rDSN.Tron.App.Caption>("Put", input, userCallback, stateObject);
    }

    public virtual global::Microsoft.Bond.Message<global::rDSN.Tron.App.ErrorResult> EndPut(IAsyncResult asyncResult)
    {
        return EndRequest<global::rDSN.Tron.App.ErrorResult>("Put", asyncResult);
    }

    public void CancelPut(IAsyncResult asyncResult)
    {
        CancelRequest("Put", asyncResult);
    }

}    // ~ CDG_Proxy
} // namespace App
} // namespace Tron
} // namespace rDSN
