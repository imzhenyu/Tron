/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Microsoft Corporation
 * 
 * -=- Robust Distributed System Nucleus (rDSN) -=- 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 * Description:
 *     What is this file about?
 *
 * Revision history:
 *     Feb., 2016, @imzhenyu (Zhenyu Guo), done in Tron project and copied here
 *     xxxx-xx-xx, author, fix bug about xxx
 */
 
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : indexserve_services.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::BondTransport;
using global::BondNetlibTransport;
using global::Microsoft.Bond;
using global::System;
using global::System.Collections.Generic;

namespace rDSN
{
namespace Tron
{
namespace App
{

///<summary>
/// SpellChecker
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class SpellChecker_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public SpellChecker_Service() : this("Microsoft::Tron::App.SpellChecker")
    {
    }

    public SpellChecker_Service(string serviceName) : base(serviceName)
    {
        Register("Check", new BondTransport.FunctionHelper(CheckHelper));

    }

    public abstract void Check(Request<global::rDSN.Tron.App.SpellCheckRequest, global::rDSN.Tron.App.SpellCheckResponse> call);

    public virtual void CheckHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.App.SpellCheckRequest, global::rDSN.Tron.App.SpellCheckResponse> request = GenerateRequest<global::rDSN.Tron.App.SpellCheckRequest, global::rDSN.Tron.App.SpellCheckResponse>(msg, serv);
        if (request != null)
        {
            Check(request);
        }
    }

}    // ~ SpellChecker_Service

///<summary>
/// IFEX
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class IFEX_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public IFEX_Service() : this("Microsoft::Tron::App.IFEX")
    {
    }

    public IFEX_Service(string serviceName) : base(serviceName)
    {
        Register("OnSearchQuery", new BondTransport.FunctionHelper(OnSearchQueryHelper));

    }

    public abstract void OnSearchQuery(Request<global::rDSN.Tron.App.StringQuery, global::rDSN.Tron.App.StringQuery> call);

    public virtual void OnSearchQueryHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.App.StringQuery, global::rDSN.Tron.App.StringQuery> request = GenerateRequest<global::rDSN.Tron.App.StringQuery, global::rDSN.Tron.App.StringQuery>(msg, serv);
        if (request != null)
        {
            OnSearchQuery(request);
        }
    }

}    // ~ IFEX_Service

///<summary>
/// ALTA
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class ALTA_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public ALTA_Service() : this("Microsoft::Tron::App.ALTA")
    {
    }

    public ALTA_Service(string serviceName) : base(serviceName)
    {
    }
}    // ~ ALTA_Service

///<summary>
/// IsCache
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class IsCache_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public IsCache_Service() : this("Microsoft::Tron::App.IsCache")
    {
    }

    public IsCache_Service(string serviceName) : base(serviceName)
    {
        Register("Get", new BondTransport.FunctionHelper(GetHelper));

        Register("Put", new BondTransport.FunctionHelper(PutHelper));

    }

    public abstract void Get(Request<global::rDSN.Tron.App.StringQuery, global::rDSN.Tron.App.QueryResult> call);

    public abstract void Put(Request<global::rDSN.Tron.App.QueryResult, global::rDSN.Tron.App.ErrorResult> call);

    public virtual void GetHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.App.StringQuery, global::rDSN.Tron.App.QueryResult> request = GenerateRequest<global::rDSN.Tron.App.StringQuery, global::rDSN.Tron.App.QueryResult>(msg, serv);
        if (request != null)
        {
            Get(request);
        }
    }


    public virtual void PutHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.App.QueryResult, global::rDSN.Tron.App.ErrorResult> request = GenerateRequest<global::rDSN.Tron.App.QueryResult, global::rDSN.Tron.App.ErrorResult>(msg, serv);
        if (request != null)
        {
            Put(request);
        }
    }

}    // ~ IsCache_Service

///<summary>
/// QU
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class QU_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public QU_Service() : this("Microsoft::Tron::App.QU")
    {
    }

    public QU_Service(string serviceName) : base(serviceName)
    {
        Register("OnQueryUnderstanding", new BondTransport.FunctionHelper(OnQueryUnderstandingHelper));

    }

    public abstract void OnQueryUnderstanding(Request<global::rDSN.Tron.App.StringQuery, global::rDSN.Tron.App.AlterativeQueryList> call);

    public virtual void OnQueryUnderstandingHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.App.StringQuery, global::rDSN.Tron.App.AlterativeQueryList> request = GenerateRequest<global::rDSN.Tron.App.StringQuery, global::rDSN.Tron.App.AlterativeQueryList>(msg, serv);
        if (request != null)
        {
            OnQueryUnderstanding(request);
        }
    }

}    // ~ QU_Service

///<summary>
/// QU2
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class QU2_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public QU2_Service() : this("Microsoft::Tron::App.QU2")
    {
    }

    public QU2_Service(string serviceName) : base(serviceName)
    {
        Register("OnQueryAnnotation", new BondTransport.FunctionHelper(OnQueryAnnotationHelper));

    }

    public abstract void OnQueryAnnotation(Request<global::rDSN.Tron.App.StringQuery, global::rDSN.Tron.App.AugmentedQuery> call);

    public virtual void OnQueryAnnotationHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.App.StringQuery, global::rDSN.Tron.App.AugmentedQuery> request = GenerateRequest<global::rDSN.Tron.App.StringQuery, global::rDSN.Tron.App.AugmentedQuery>(msg, serv);
        if (request != null)
        {
            OnQueryAnnotation(request);
        }
    }

}    // ~ QU2_Service

///<summary>
/// TLA
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class TLA_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public TLA_Service() : this("Microsoft::Tron::App.TLA")
    {
    }

    public TLA_Service(string serviceName) : base(serviceName)
    {
    }
}    // ~ TLA_Service

///<summary>
/// WebCache
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class WebCache_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public WebCache_Service() : this("Microsoft::Tron::App.WebCache")
    {
    }

    public WebCache_Service(string serviceName) : base(serviceName)
    {
        Register("Get", new BondTransport.FunctionHelper(GetHelper));

        Register("Put", new BondTransport.FunctionHelper(PutHelper));

    }

    public abstract void Get(Request<global::rDSN.Tron.App.AugmentedQuery, global::rDSN.Tron.App.QueryResult> call);

    public abstract void Put(Request<global::rDSN.Tron.App.QueryResult, global::rDSN.Tron.App.ErrorResult> call);

    public virtual void GetHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.App.AugmentedQuery, global::rDSN.Tron.App.QueryResult> request = GenerateRequest<global::rDSN.Tron.App.AugmentedQuery, global::rDSN.Tron.App.QueryResult>(msg, serv);
        if (request != null)
        {
            Get(request);
        }
    }


    public virtual void PutHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.App.QueryResult, global::rDSN.Tron.App.ErrorResult> request = GenerateRequest<global::rDSN.Tron.App.QueryResult, global::rDSN.Tron.App.ErrorResult>(msg, serv);
        if (request != null)
        {
            Put(request);
        }
    }

}    // ~ WebCache_Service

///<summary>
/// SaaS
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class SaaS_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public SaaS_Service() : this("Microsoft::Tron::App.SaaS")
    {
    }

    public SaaS_Service(string serviceName) : base(serviceName)
    {
        Register("OnL1Selection", new BondTransport.FunctionHelper(OnL1SelectionHelper));

    }

    public abstract void OnL1Selection(Request<global::rDSN.Tron.App.AugmentedQuery, global::rDSN.Tron.App.StaticRankResult> call);

    public virtual void OnL1SelectionHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.App.AugmentedQuery, global::rDSN.Tron.App.StaticRankResult> request = GenerateRequest<global::rDSN.Tron.App.AugmentedQuery, global::rDSN.Tron.App.StaticRankResult>(msg, serv);
        if (request != null)
        {
            OnL1Selection(request);
        }
    }

}    // ~ SaaS_Service

///<summary>
/// RaaS
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class RaaS_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public RaaS_Service() : this("Microsoft::Tron::App.RaaS")
    {
    }

    public RaaS_Service(string serviceName) : base(serviceName)
    {
        Register("OnL2Rank", new BondTransport.FunctionHelper(OnL2RankHelper));

    }

    public abstract void OnL2Rank(Request<global::rDSN.Tron.App.PerDocStaticRank, global::rDSN.Tron.App.Rank> call);

    public virtual void OnL2RankHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.App.PerDocStaticRank, global::rDSN.Tron.App.Rank> request = GenerateRequest<global::rDSN.Tron.App.PerDocStaticRank, global::rDSN.Tron.App.Rank>(msg, serv);
        if (request != null)
        {
            OnL2Rank(request);
        }
    }

}    // ~ RaaS_Service

///<summary>
/// CDG
///</summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public abstract class CDG_Service : BondTransport.BondService
{
    //
    // Constructors
    //
    public CDG_Service() : this("Microsoft::Tron::App.CDG")
    {
    }

    public CDG_Service(string serviceName) : base(serviceName)
    {
        Register("Get", new BondTransport.FunctionHelper(GetHelper));

        Register("Put", new BondTransport.FunctionHelper(PutHelper));

    }

    public abstract void Get(Request<global::rDSN.Tron.App.DocId, global::rDSN.Tron.App.Caption> call);

    public abstract void Put(Request<global::rDSN.Tron.App.Caption, global::rDSN.Tron.App.ErrorResult> call);

    public virtual void GetHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.App.DocId, global::rDSN.Tron.App.Caption> request = GenerateRequest<global::rDSN.Tron.App.DocId, global::rDSN.Tron.App.Caption>(msg, serv);
        if (request != null)
        {
            Get(request);
        }
    }


    public virtual void PutHelper(TransportAsyncResult msg, IBondTransportServer serv)
    {
        Request<global::rDSN.Tron.App.Caption, global::rDSN.Tron.App.ErrorResult> request = GenerateRequest<global::rDSN.Tron.App.Caption, global::rDSN.Tron.App.ErrorResult>(msg, serv);
        if (request != null)
        {
            Put(request);
        }
    }

}    // ~ CDG_Service
} // namespace App
} // namespace Tron
} // namespace rDSN
