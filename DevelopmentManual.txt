
==== Preliminaries ====

- Tron.exe is a helper tool that you can use for both development and cluster operation.

==== How to register a new primitive service? ====

1. Write your implementation for this service, and put everything into a directory for service running on a remote machine

2. Run 'Tron.exe PublishPackage %dir' to publish the service implementation to the service store.

==== How to build a composed service? ====

1. Run 'Tron.exe gc $packageName' to get the composition stub dll for the given package $packageName (repeat this when you need multiple base services)

2. Write your composed services using these composition stub dlls

3. Run your composed service to generate a package for your composed service

4. Run 'Tron.exe PublishPackage %dir' to publish the composed service to the service store


//--------------------------------------------------------------------------------

- connecting services (myservice using four services s1, s2, s3, s4 with different types)
	- legacy services (with .thrift, or .proto interface definition file <IDL>)
	     - (1) using ISpecProvider to convert IDL files => (missing! using php template)
		       => C# data structures with annotations => s1.spec.dll (manifest *.thift)

	     - (2) s1.spec.dll
		           => s1.Tron.Composition.dll (done, ServiceContract.GenerateCompositionStub(s, cls, c);)
				   => s1.clientlib.linux.dll s1.clientlib.windows.dll ????

	     - (3) programming with Tron language using composition stub dlls as referenced dlls (done)

		 - (4) compile composed program (done)
		    
			- generate main program based on calls to primitive services using clientlibs (s1,s2,s3,s4) => myservice.cs

		    - link against s1.clientlib.dll


   ISpecProvider for thrift_3_0 proto_xxx_XXX
     - string[] ToCommonSpec(ServiceSpec spec, string dir); 
	       => used by step (1) above

	 - ErrorCode GenerateServiceClient( => used by (2) above
            ServiceSpec spec,
            string dir,
            ClientLanguage lang,       // C# 
            ClientPlatform platform,   // windows, linux
            out LinkageInfo linkInfo
            );

@Ke
	- indexserve.thrift => e.g., IsCache.thrift
	    (1) generate C# service client and server using thrift.exe and thrift library
		(2) generate C# client and C++ server using dsn.cg.bat and rdsn library
@Tianyi
    - xxx.thrift => xxx.spec.dll/xxx.Tron.composition.dll/xxx.clientlib.dll
	- go through the index serve example end-to-end using both legacy and rdsn applications
	     - QU (C++, Thrift runtime)
		 - QU2 (C#, rDSN runtime)
		 - RaaS (C++, rSDN runtime, with replication)
@Chang
     - publish app package (QU, QU2, RaaS) to app store with meta information filled
	     - on app registration, call (1)/(2)
		   to generate xxx.spec.dll/xxx.Tron.composition.dll
		- download for xxx.Tron.composition.dll
		- publish composed program as a new app package

